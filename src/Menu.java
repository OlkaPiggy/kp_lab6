

/*Створити класи для сутностей, описаних в завданні. Наповнити колекції даних
        з текстових файлів. Для виконання завдань розробити меню. Для реалізації
        використовувати технологію потоків Stream.API. Cеріалізувати колекції*/

/*Варіант 2.
Створити класи для роботи піцерії. Клас Піцца повинен містити інформацію про
назву, вагу, вартість та список складників.
Клас Відвідувач піцерії знатиме номер, адресу доставки, також список
замовлень та бажаний час доставки для кожного замовлення.
Клас Піцерія містить колекцію всіх піц та колекцію всіх користувачів, а також
методи, які з цими колекціями можна здійснювати.
Завдання.
1. Відсортувати всі замовлення за часом доставки.
2. Створити список адресів для корстувачів, що замовили більше ніж 2 піцци.
3. Перевірити, скільки користувачів замовили піццу з заданою назвою.
4. Знайти найбільшу кількість піц, замовлених користувачем серед
запропонованого переліку піц.
5. Створити колекцію з переліком піц та списками їх замовників.
6. Створити список не виконаних замовлень на біжучий час, та вказати час
перетермінування.*/

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Menu {

    static void start()
    {

        while(true) {
            Scanner in=new Scanner(System.in);
            System.out.println("What do you want to do?");
            System.out.println("1) Відсортувати всі замовлення за часом доставки.\n2) Створити список адресів для корстувачів, що замовили більше ніж 2 піци.\n" +
                    "3) Перевірити, скільки користувачів замовили піццу з заданою назвою\n4)Знайти найбільшу кількість піц, замовлених користувачем серед" +
                    "запропонованого переліку піц.\n"+"5)Створити колекцію з переліком піц та списками їх замовників.\n"+"6)Створити список не виконаних замовлень на біжучий час, та вказати час" +
                    "перетермінування.\n7)Серіалізувати дані\n8) Десеріалізувати дані");


            int choose = in.nextInt();
            File f_customers=new File("customers.txt");
            File f_pizzas=new File("pizzas.txt");
            Pizzeria pizzeria=new Pizzeria();
            pizzeria.readPizza(f_pizzas);
            pizzeria.readCustomer(f_customers);

            if (choose == 1) {
                //Відсортувати всі замовлення за часом доставки.
                pizzeria.Task_1();
            }
            else if(choose==2)
            {
                //Створити список адресів для корстувачів, що замовили більше ніж 2 піци.
                pizzeria.Task_2();
            }
            else if(choose==3)
            {
                //Перевірити, скільки користувачів замовили піццу з заданою назвою
                pizzeria.Task_3();
            }
            else if(choose==4)
            {
                //Знайти найбільшу кількість піц, замовлених користувачем серед запропонованого переліку піц.
                pizzeria.Task_4();
            }
            else if(choose==5)
            {
                //Створити колекцію з переліком піц та списками їх замовників.
                pizzeria.Task_5();
            }
            else if (choose==6) {
                //Створити список не виконаних замовлень на біжучий час, та вказати час перетермінування
                pizzeria.Task_6();
            }
            else if (choose==7) {
                //Серіалізувати дані
                String str="data.txt";
                Serialization.SerializePizzeria(pizzeria,str);
            }
            else if (choose==8) {
                //Десеріалізувати дані
                String str="data.txt";
                Serialization.DeserializePizzeria(str);
            }
            else
                break;

        }
    }
}

